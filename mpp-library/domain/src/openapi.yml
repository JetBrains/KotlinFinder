openapi: 3.0.0
info:
  title: JetFinder server
  version: v1
servers:
  - url: http://kotlin-demo.kotlinconf.com:8080
    description: demo
paths:
  /finder/status:
    get:
      tags:
        - game
      summary: 'get status'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /finder/config:
    get:
      tags:
        - game
      summary: 'get config'
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
  /finder/proximity:
    get:
      tags:
        - game
      summary: 'send proximity nearby devices to get target info'
      parameters:
        - name: proximity
          in: query
          schema:
            type: string
          description: Device list
          required: false
          example: "beacon0:-10,beacon1:-20,beacon2:-55"
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProximityResponse'
  /finder/register:
    get:
      tags:
        - game
      summary: 'send proximity nearby devices to get target info'
      parameters:
        - name: name
          in: query
          schema:
            type: string
          description: Participant name
          required: true
          example: "USERNAME"
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
components:
  schemas:
    StatusResponse:
      type: object
      properties:
        startTime:
          type: string
          format: date-time
          example: "2019-10-22 15:21:23"
        status:
          type: integer
          example: 1
        result:
          $ref: '#/components/schemas/ResultField'
      required:
        - startTime
        - status
        - result
    ConfigResponse:
      type: object
      properties:
        index:
          type: integer
          example: 1
        winnerCount:
          type: integer
          example: 7
        activeBeacons:
          type: integer
          example: 2
        facts:
          type: array
          items:
            type: string
            example: "Did you know that ***?"
        hints:
          type: array
          items:
            $ref: '#/components/schemas/HintItem'
        result:
          $ref: '#/components/schemas/ResultField'
      required:
        - index
        - result
        - activeBeacons
        - winnerCount
    ProximityResponse:
      type: object
      properties:
        discovered:
          description: "array with code of discovered spots"
          type: array
          items:
            type: integer
            example: 1
        near:
          type: array
          items:
            $ref: '#/components/schemas/ProximityItem'
        result:
          $ref: '#/components/schemas/ResultField'
    HintItem:
      type: object
      properties:
        code:
          type: integer
          example: 1
        hint:
          type: string
          example: "Me!"
      required:
        - code
        - question
        - hint
    ProximityItem:
      type: object
      properties:
        code:
          type: integer
          example: 2
        strength:
          type: integer
          example: 70
      required:
        - code
        - strength
    ResultField:
      type: string
      enum:
        - OK
        - ERROR
      example: "OK"
    RegisterResponse:
      type: object
      properties:
        message:
          type: string
          example: "Message to winner"
        winner:
          type: integer
          example: 1
        place:
          type: integer
          example: 3
        winnerCount:
          type: integer
          example: 19
        result:
          $ref: '#/components/schemas/ResultField'
      required:
        - message
        - winner
        - place
        - winnerCount
        - result